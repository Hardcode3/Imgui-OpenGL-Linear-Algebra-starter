message(STATUS "> Found external directory")

# glfw configuration
if(NOT RAYTRACING_GLFW_GIT_SUBPACKAGES_DEPENDENCY)
	message(STATUS "> Searching for external GLFW...")
	find_package(glfw3 CONFIG REQUIRED)
endif()

if(glfw OR EXISTS glfw_INCLUDE_DIR)
	message(STATUS "> Discovered  preinstalled GLFW")

else()
   	message(NOTICE "> Missing glfw3")
	
	if(RAYTRACING_GLFW_GIT_SUBPACKAGES_DEPENDENCY)
		# git stuff
		message(NOTICE "> Checking submodule folder...")
		if (
			(NOT EXISTS ${PROJECT_SOURCE_DIR}/external/glfw) OR 
			(NOT IS_DIRECTORY ${PROJECT_SOURCE_DIR}/external/glfw)
		)
			message(NOTICE "> GLFW gitsubmodule folder not initialized")
			message(STATUS "> Cloning imgui from remote...")
			execute_process(
				COMMAND git submodule update --init glfw
				WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
			)
			message(STATUS "> Finished cloning GLFW from remote")
		endif()
	else()
		message(NOTICE "> GLFW submodule folder already initialized")
	endif()

	if(RAYTRACING_GLFW_GIT_SUBPACKAGES_DEPENDENCY)
		add_subdirectory(glfw)
		include_directories(${glfw_INCLUDE_DIR})
	endif()
endif()


# eigen configuration
if(NOT RAYTRACING_EIGEN_GIT_SUBPACKAGES_DEPENDENCY)
	message(STATUS "> Searching for external Eigen...")
	find_package(Eigen3 CONFIG REQUIRED)
endif()

if(Eigen3 OR EXISTS Eigen3_INCLUDE_DIR)
	message(STATUS "> Discovered preinstalled Eigen3")

else()
    message(NOTICE "> Missing Eigen3")
	
	if(RAYTRACING_EIGEN_GIT_SUBPACKAGES_DEPENDENCY)
		# git stuff
		message(NOTICE "> Checking submodule folder...")
		if (
			(NOT EXISTS ${PROJECT_SOURCE_DIR}/external/eigen) OR 
			(NOT IS_DIRECTORY ${PROJECT_SOURCE_DIR}/external/eigen)
		)
			message(NOTICE "> Eigen gitsubmodule folder not initialized")
			message(STATUS "> Cloning imgui from remote...")
			execute_process(
				COMMAND git submodule update --init eigen
				WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
			)
			message(STATUS "> Finished cloning Eigen from remote")
		endif()
	else()
		message(NOTICE "> Eigen submodule folder already initialized")
	endif()
	if(RAYTRACING_EIGEN_GIT_SUBPACKAGES_DEPENDENCY)
		add_subdirectory(eigen)
	endif()
endif()


# imgui configuration
if((NOT imgui) OR (NOT imgui_INCLUDE_DIR))
	message(NOTICE "> Missing imgui")
	message(NOTICE "> Checking submodule folder...")
	if (
		(NOT EXISTS ${PROJECT_SOURCE_DIR}/external/imgui) OR 
		(NOT IS_DIRECTORY ${PROJECT_SOURCE_DIR}/external/imgui)
	)
		# git stuff
		message(NOTICE "> Imgui gitsubmodule folder not initialized")
		message(STATUS "> Cloning imgui from remote...")
		execute_process(
			COMMAND git submodule update --init imgui
			WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		)
		message(STATUS "> Finished cloning imgui from remote")
	else()
		message(NOTICE "> Imgui submodule folder already initialized")
	endif()
	
	set(target_name imgui)
	set(imgui_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/external/imgui
		CACHE PATH "Imgui include directory")
	set(imgui_DIR ${CMAKE_SOURCE_DIR}/external/imgui
		CACHE PATH "Imgui directory")
	
	# setting up the target
	add_library(${target_name} STATIC "")
	target_link_libraries(${target_name} PRIVATE glfw)

	target_sources(${target_name}
		# cpp
		PRIVATE
			# GLFW
			"${PROJECT_SOURCE_DIR}/external/imgui/backends/imgui_impl_glfw.cpp"
			# OpenGL3
			"${PROJECT_SOURCE_DIR}/external/imgui/backends/imgui_impl_opengl3.cpp"

			# sources
			"${PROJECT_SOURCE_DIR}/external/imgui/imgui.cpp"
			"${PROJECT_SOURCE_DIR}/external/imgui/imgui_demo.cpp"
			"${PROJECT_SOURCE_DIR}/external/imgui/imgui_draw.cpp"
			"${PROJECT_SOURCE_DIR}/external/imgui/imgui_tables.cpp"
			"${PROJECT_SOURCE_DIR}/external/imgui/imgui_widgets.cpp"

		# headers
		PRIVATE
			# GLFW
			"${PROJECT_SOURCE_DIR}/external/imgui/backends/imgui_impl_glfw.h"
			# OpenGL3
			"${PROJECT_SOURCE_DIR}/external/imgui/backends/imgui_impl_opengl3.h"
			"${PROJECT_SOURCE_DIR}/external/imgui/backends/imgui_impl_opengl3_loader.h"

			# sources
			"${PROJECT_SOURCE_DIR}/external/imgui/imconfig.h"
			"${PROJECT_SOURCE_DIR}/external/imgui/imgui.h"
			"${PROJECT_SOURCE_DIR}/external/imgui/imgui_internal.h"
			"${PROJECT_SOURCE_DIR}/external/imgui/imstb_rectpack.h"
			"${PROJECT_SOURCE_DIR}/external/imgui/imstb_textedit.h"
			"${PROJECT_SOURCE_DIR}/external/imgui/imstb_truetype.h"
	)

	target_include_directories(${target_name}
		PUBLIC
			"${PROJECT_SOURCE_DIR}/include"
			"${PROJECT_SOURCE_DIR}/external/imgui"
			"${PROJECT_SOURCE_DIR}/external/imgui/backends"
			"${PROJECT_BINARY_DIR}"
	)

	# install the headers to make them available for the installed target
	install(DIRECTORY ${imgui_INCLUDE_DIR}/imgui DESTINATION ${CMAKE_BINARY_DIR}/external/imgui)

	# export the target so it can be included using find_package
	install(TARGETS imgui EXPORT imgui DESTINATION ${CMAKE_BINARY_DIR}/external/imgui)

	# checks a last time if imgui is well installed
	if (
		(NOT EXISTS ${PROJECT_SOURCE_DIR}/external/imgui) OR 
		(NOT IS_DIRECTORY ${PROJECT_SOURCE_DIR}/external/imgui)
	)
		message(FATAL_ERROR "> Failed to initialize imgui dependency")
	endif()

else()
	message(STATUS "> Discovered already installed imgui")
endif()

